// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  userType      String    @default("student")
  state         Boolean   @default(false)
  password      String?   @map("password")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  courses       Course[]
  Review        Review[]
  Lession       Lession[]
  accounts      Account[]
  sessions      Session[]
}

model Course {
  id          String   @id @default(cuid())
  name        String
  category    Category @default(OTHER)
  description String
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String
  reviews     Review[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Category {
  DEVELOPMENT
  BUSINESS
  DESIGN
  MARKETING
  IT_AND_SOFTWARE
  PERSONAL_DEVELOPMENT
  PHOTOGRAPHY
  MUSIC
  HEALTH_AND_FITNESS
  TEACHING_AND_ACADEMICS
  LIFESTYLE
  OTHER
}

model Review {
  id          String   @id @default(cuid())
  Course      Course   @relation(fields: [courseId], references: [id])
  courseId    String
  description String
  user        User     @relation(fields: [UserId], references: [id])
  UserId      String
  rating      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Module {
  id        String    @id @default(cuid())
  name      String
  lessons   Lession[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Lession {
  id        String   @id @default(cuid())
  name      String
  duration  Int
  resources String
  video     String
  Module    Module   @relation(fields: [moduleId], references: [id])
  moduleId  String
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
